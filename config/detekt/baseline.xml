<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <!-- example -->
    <ID>EmptyFunctionBlock:EditTextExt.kt$&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:ExperimentsFragment.kt$ExperimentsFragment.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:RetryOnRedirectBasicNetworkTest.kt$RetryOnRedirectBasicNetworkTest.MockedRequest${}</ID>
    <ID>GlobalCoroutineUsage:ExperimentsFragment.kt$ExperimentsFragment$GlobalScope.launch(Dispatchers.Default) { val result = experimentStore.fetchAssignments(platform, experimentNames, anonymousId) withContext(Dispatchers.Main) { onAssignmentsFetched(result) } }</ID>
    <ID>GlobalCoroutineUsage:JavaCoroutineHelper.kt$JavaCoroutineHelper$GlobalScope.launch(Dispatchers.Main) { val response = xPostsStore.fetchXPosts(site) consumer.accept(response.toString()) }</ID>
    <ID>GlobalCoroutineUsage:ReactNativeFragment.kt$ReactNativeFragment$GlobalScope.launch(Dispatchers.Main) { val path = path_field.text.toString() prependToLog("Making request: $path") val response = withContext(Dispatchers.IO) { site?.let { reactNativeStore.executeRequest(it, path) } } when (response) { is Success -> { prependToLog("Request succeeded") AppLog.i(AppLog.T.API, "Request result: ${response.result}") } is Error -> prependToLog("Request to '$path' failed: ${response.error.message}") } }</ID>
    <ID>GlobalCoroutineUsage:WooGatewaysFragment.kt$WooGatewaysFragment$GlobalScope.launch(Dispatchers.Main) { supervisorScope { try { val response = withContext(Dispatchers.Default) { gatewayStore.fetchAllGateways(site) } response.error?.let { prependToLog("${it.type}: ${it.message}") } response.model?.let { prependToLog("Site has ${it.size} gateways") it.forEach { gateway -> prependToLog("Gateway: $gateway") } } } catch (e: Exception) { prependToLog("Error: ${e.message}") } } }</ID>
    <ID>GlobalCoroutineUsage:WooGatewaysFragment.kt$WooGatewaysFragment$GlobalScope.launch(Dispatchers.Main) { supervisorScope { try { val response = withContext(Dispatchers.Default) { gatewayStore.fetchGateway(site, gatewayEditText.text.toString()) } printGateway(response) } catch (e: Exception) { prependToLog("Error: ${e.message}") } } }</ID>
    <ID>GlobalCoroutineUsage:WooRefundsFragment.kt$WooRefundsFragment$GlobalScope.launch(Dispatchers.Main) { supervisorScope { try { val response = withContext(Dispatchers.Default) { refundsStore.fetchAllRefunds( site, orderEditText.text.toString().toLong() ) } response.error?.let { prependToLog("${it.type}: ${it.message}") } response.model?.let { prependToLog("Order ${orderEditText.text} has ${it.size} refunds") it.forEach { refund -> prependToLog("Refund: $refund") } } } catch (e: Exception) { prependToLog("Error: ${e.message}") } } }</ID>
    <ID>GlobalCoroutineUsage:WooRefundsFragment.kt$WooRefundsFragment$GlobalScope.launch(Dispatchers.Main) { supervisorScope { try { val response = withContext(Dispatchers.Default) { refundsStore.fetchRefund( site, orderEditText.text.toString().toLong(), refundEditText.text.toString().toLong() ) } printRefund(response) } catch (e: Exception) { prependToLog("Error: ${e.message}") } } }</ID>
    <ID>GlobalCoroutineUsage:WooRefundsFragment.kt$WooRefundsFragment$GlobalScope.launch(Dispatchers.Main) { try { val response = withContext(Dispatchers.Default) { refundsStore.createAmountRefund( site, orderEditText.text.toString().toLong(), amountEditText.text.toString().toBigDecimal(), reasonEditText.text.toString() ) } printRefund(response) } catch (e: Exception) { prependToLog("Error: ${e.message}") } }</ID>
    <ID>GlobalCoroutineUsage:WooTaxFragment.kt$WooTaxFragment$GlobalScope.launch(Dispatchers.Main) { supervisorScope { try { val response = withContext(Dispatchers.Default) { wcTaxStore.fetchTaxClassList(site) } response.error?.let { prependToLog("${it.type}: ${it.message}") } response.model?.let { prependToLog("Site has ${it.size} tax classes") } } catch (e: Exception) { prependToLog("Error: ${e.message}") } } }</ID>
    <ID>PrintStackTrace:WooShippingLabelFragment.kt$WooShippingLabelFragment$e</ID>
    <ID>PrintStackTrace:WooShippingLabelFragment.kt$WooShippingLabelFragment$ex</ID>
    <ID>SpreadOperator:WooOrdersFragment.kt$WooOrdersFragment$(site, *filter.toTypedArray())</ID>
    <ID>SwallowedException:WooCustomersSearchBuilderFragment.kt$WooCustomersSearchBuilderFragment$e: Exception</ID>
    <ID>SwallowedException:WooShippingLabelFragment.kt$WooShippingLabelFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooCommerceFragment.kt$WooCommerceFragment$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WooCustomersSearchBuilderFragment.kt$WooCustomersSearchBuilderFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooGatewaysFragment.kt$WooGatewaysFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooLeaderboardsFragment.kt$WooLeaderboardsFragment$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WooProductAttributeFragment.kt$WooProductAttributeFragment$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WooRefundsFragment.kt$WooRefundsFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooShippingLabelFragment.kt$WooShippingLabelFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooTaxFragment.kt$WooTaxFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooUpdateProductFragment.kt$WooUpdateProductFragment$ex: Exception</ID>
  </CurrentIssues>
</SmellBaseline>
