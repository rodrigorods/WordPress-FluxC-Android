<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <!-- plugins:woocommerce -->
    <ID>ImplicitDefaultLocale:DateUtils.kt$DateUtils$String.format("%d-%02d-%02d", year, (month + 1), dayOfMonth)</ID>
    <ID>SpreadOperator:WCInboxStore.kt$WCInboxStore$(siteId, *notesWithActions.toTypedArray())</ID>
    <ID>SpreadOperator:WCOrderStore.kt$WCOrderStore$(*it.result!!.toTypedArray())</ID>
    <ID>SpreadOperator:WCOrderStore.kt$WCOrderStore$(*payload.fetchedOrders.toTypedArray())</ID>
    <ID>SpreadOperator:WCOrderStore.kt$WCOrderStore$(*payload.ordersWithMeta.toTypedArray())</ID>
    <!-- example -->
    <ID>ComplexCondition:WooShippingLabelFragment.kt$WooShippingLabelFragment$boxId == null || height == null || width == null || length == null || weight == null</ID>
    <ID>ComplexCondition:WooShippingLabelFragment.kt$WooShippingLabelFragment$height == null || width == null || length == null || weight == null</ID>
    <ID>ComplexMethod:CommentsMapperTest.kt$CommentsMapperTest$private fun assertModelsEqual(mappedModel: CommentModel, commentModel: CommentModel): Boolean</ID>
    <ID>ComplexMethod:NotificationsFragment.kt$NotificationsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:WCOrderListActivity.kt$WCOrderListItemDataSource$override fun getItemIdentifiers( listDescriptor: WCOrderListDescriptor, itemIds: List&lt;RemoteId>, isListFullyFetched: Boolean ): List&lt;WCOrderListItemIdentifier></ID>
    <ID>ComplexMethod:WCOrderListActivity.kt$WCOrderListItemUIType$override fun equals(other: Any?): Boolean</ID>
    <ID>ComplexMethod:WooBatchUpdateVariationsFragment.kt$WooBatchUpdateVariationsFragment$private fun buildPayload(): BatchUpdateVariationsPayload</ID>
    <ID>ComplexMethod:WooCommerceFragment.kt$WooCommerceFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:WooCouponsFragment.kt$WooCouponsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:WooOrdersFragment.kt$WooOrdersFragment$@Suppress("unused") @Subscribe(threadMode = ThreadMode.MAIN) fun onOrderChanged(event: OnOrderChanged)</ID>
    <ID>ComplexMethod:WooOrdersFragment.kt$WooOrdersFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:WooProductsFragment.kt$WooProductsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:WooRevenueStatsFragment.kt$WooRevenueStatsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:WooShippingLabelFragment.kt$WooShippingLabelFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:WooUpdateCouponFragment.kt$WooUpdateCouponFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:WooUpdateProductFragment.kt$WooUpdateProductFragment$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>ComplexMethod:WooUpdateProductFragment.kt$WooUpdateProductFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:WooUpdateVariationFragment.kt$WooUpdateVariationFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>EmptyFunctionBlock:EditTextExt.kt$&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:ExperimentsFragment.kt$ExperimentsFragment.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:RetryOnRedirectBasicNetworkTest.kt$RetryOnRedirectBasicNetworkTest.MockedRequest${}</ID>
    <ID>GlobalCoroutineUsage:ExperimentsFragment.kt$ExperimentsFragment$GlobalScope.launch(Dispatchers.Default) { val result = experimentStore.fetchAssignments(platform, experimentNames, anonymousId) withContext(Dispatchers.Main) { onAssignmentsFetched(result) } }</ID>
    <ID>GlobalCoroutineUsage:JavaCoroutineHelper.kt$JavaCoroutineHelper$GlobalScope.launch(Dispatchers.Main) { val response = xPostsStore.fetchXPosts(site) consumer.accept(response.toString()) }</ID>
    <ID>GlobalCoroutineUsage:ReactNativeFragment.kt$ReactNativeFragment$GlobalScope.launch(Dispatchers.Main) { val path = path_field.text.toString() prependToLog("Making request: $path") val response = withContext(Dispatchers.IO) { site?.let { reactNativeStore.executeRequest(it, path) } } when (response) { is Success -> { prependToLog("Request succeeded") AppLog.i(AppLog.T.API, "Request result: ${response.result}") } is Error -> prependToLog("Request to '$path' failed: ${response.error.message}") } }</ID>
    <ID>GlobalCoroutineUsage:WooGatewaysFragment.kt$WooGatewaysFragment$GlobalScope.launch(Dispatchers.Main) { supervisorScope { try { val response = withContext(Dispatchers.Default) { gatewayStore.fetchAllGateways(site) } response.error?.let { prependToLog("${it.type}: ${it.message}") } response.model?.let { prependToLog("Site has ${it.size} gateways") it.forEach { gateway -> prependToLog("Gateway: $gateway") } } } catch (e: Exception) { prependToLog("Error: ${e.message}") } } }</ID>
    <ID>GlobalCoroutineUsage:WooGatewaysFragment.kt$WooGatewaysFragment$GlobalScope.launch(Dispatchers.Main) { supervisorScope { try { val response = withContext(Dispatchers.Default) { gatewayStore.fetchGateway(site, gatewayEditText.text.toString()) } printGateway(response) } catch (e: Exception) { prependToLog("Error: ${e.message}") } } }</ID>
    <ID>GlobalCoroutineUsage:WooRefundsFragment.kt$WooRefundsFragment$GlobalScope.launch(Dispatchers.Main) { supervisorScope { try { val response = withContext(Dispatchers.Default) { refundsStore.fetchAllRefunds( site, orderEditText.text.toString().toLong() ) } response.error?.let { prependToLog("${it.type}: ${it.message}") } response.model?.let { prependToLog("Order ${orderEditText.text} has ${it.size} refunds") it.forEach { refund -> prependToLog("Refund: $refund") } } } catch (e: Exception) { prependToLog("Error: ${e.message}") } } }</ID>
    <ID>GlobalCoroutineUsage:WooRefundsFragment.kt$WooRefundsFragment$GlobalScope.launch(Dispatchers.Main) { supervisorScope { try { val response = withContext(Dispatchers.Default) { refundsStore.fetchRefund( site, orderEditText.text.toString().toLong(), refundEditText.text.toString().toLong() ) } printRefund(response) } catch (e: Exception) { prependToLog("Error: ${e.message}") } } }</ID>
    <ID>GlobalCoroutineUsage:WooRefundsFragment.kt$WooRefundsFragment$GlobalScope.launch(Dispatchers.Main) { try { val response = withContext(Dispatchers.Default) { refundsStore.createAmountRefund( site, orderEditText.text.toString().toLong(), amountEditText.text.toString().toBigDecimal(), reasonEditText.text.toString() ) } printRefund(response) } catch (e: Exception) { prependToLog("Error: ${e.message}") } }</ID>
    <ID>GlobalCoroutineUsage:WooTaxFragment.kt$WooTaxFragment$GlobalScope.launch(Dispatchers.Main) { supervisorScope { try { val response = withContext(Dispatchers.Default) { wcTaxStore.fetchTaxClassList(site) } response.error?.let { prependToLog("${it.type}: ${it.message}") } response.model?.let { prependToLog("Site has ${it.size} tax classes") } } catch (e: Exception) { prependToLog("Error: ${e.message}") } } }</ID>
    <ID>LargeClass:ProductSqlUtilsTest.kt$ProductSqlUtilsTest</ID>
    <ID>LargeClass:WCShippingLabelStoreTest.kt$WCShippingLabelStoreTest</ID>
    <ID>LargeClass:WCStatsStoreTest.kt$WCStatsStoreTest</ID>
    <ID>LargeClass:WooOrdersFragment.kt$WooOrdersFragment : StoreSelectingFragmentListener</ID>
    <ID>LargeClass:WooProductsFragment.kt$WooProductsFragment : StoreSelectingFragment</ID>
    <ID>LargeClass:WooShippingLabelFragment.kt$WooShippingLabelFragment : StoreSelectingFragment</ID>
    <ID>LargeClass:WooUpdateProductFragment.kt$WooUpdateProductFragment : Fragment</ID>
    <ID>LongMethod:AddressEditDialogFragment.kt$AddressEditDialogFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:InsightsRestClientTest.kt$InsightsRestClientTest$@Before fun setUp()</ID>
    <ID>LongMethod:NotificationSqlUtilsTest.kt$NotificationSqlUtilsTest$@Test fun testGetNotificationsForSite_storeOrder()</ID>
    <ID>LongMethod:NotificationsFragment.kt$NotificationsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PostListDescriptorTest.kt$PostListDescriptorTest.Companion$@JvmStatic @Parameters fun testCases(): List&lt;PostListDescriptorTestCase></ID>
    <ID>LongMethod:ThemeFragment.kt$ThemeFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WCCurrencyUtilsTest.kt$WCCurrencyUtilsTest$@Test fun testDecimalFormat()</ID>
    <ID>LongMethod:WCCustomerMapperTest.kt$WCCustomerMapperTest$@Test fun `mapper maps to correct customer dto`()</ID>
    <ID>LongMethod:WCCustomerMapperTest.kt$WCCustomerMapperTest$@Test fun `mapper maps to correct customer model`()</ID>
    <ID>LongMethod:WCShippingLabelStoreTest.kt$WCShippingLabelStoreTest$@Test fun `get shipping rates`()</ID>
    <ID>LongMethod:WCShippingLabelStoreTest.kt$WCShippingLabelStoreTest$@Test fun `purchase shipping labels with polling`()</ID>
    <ID>LongMethod:WCStatsSqlUtilsTest.kt$WCStatsSqlUtilsTest$@Test fun testGetRawRevenueStatsForSiteAndUnit()</ID>
    <ID>LongMethod:WCStatsSqlUtilsTest.kt$WCStatsSqlUtilsTest$@Test fun testSimpleInsertionAndRetrievalOfRevenueStats()</ID>
    <ID>LongMethod:WCStatsStoreTest.kt$WCStatsStoreTest$@Test fun testGetCustomStatsForDaysGranularity()</ID>
    <ID>LongMethod:WCStatsStoreTest.kt$WCStatsStoreTest$@Test fun testGetRevenueAndOrderStatsForSite()</ID>
    <ID>LongMethod:WCStatsStoreTest.kt$WCStatsStoreTest$@Test fun testGetVisitorStatsForCurrentDayGranularity()</ID>
    <ID>LongMethod:WCStatsStoreTest.kt$WCStatsStoreTest$@Test fun testGetVisitorStatsForDaysGranularity()</ID>
    <ID>LongMethod:WCStatsStoreTest.kt$WCStatsStoreTest$@Test fun testGetVisitorStatsForThisWeekGranularity()</ID>
    <ID>LongMethod:WCStatsStoreTest.kt$WCStatsStoreTest$@Test fun testGetVisitorStatsForWeeksGranularity()</ID>
    <ID>LongMethod:WCStatsStoreTest.kt$WCStatsStoreTest$@Test fun testInsertionAndRetrievalForCustomStats()</ID>
    <ID>LongMethod:WCVisitorStatsSqlUtilsTest.kt$WCVisitorStatsSqlUtilsTest$@Test fun testSimpleInsertionAndRetrievalOfCustomVisitorStats()</ID>
    <ID>LongMethod:WCVisitorStatsSqlUtilsTest.kt$WCVisitorStatsSqlUtilsTest$@Test fun testSimpleInsertionAndRetrievalOfNewCustomVisitorStats()</ID>
    <ID>LongMethod:WCVisitorStatsSqlUtilsTest.kt$WCVisitorStatsSqlUtilsTest$@Test fun testSimpleInsertionAndRetrievalOfNewVisitorStats()</ID>
    <ID>LongMethod:WCVisitorStatsSqlUtilsTest.kt$WCVisitorStatsSqlUtilsTest$@Test fun testSimpleInsertionAndRetrievalOfVisitorStats()</ID>
    <ID>LongMethod:WooBatchUpdateVariationsFragment.kt$WooBatchUpdateVariationsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooCommerceFragment.kt$WooCommerceFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooCouponsFragment.kt$WooCouponsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooOrdersFragment.kt$WooOrdersFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooProductsFragment.kt$WooProductsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooRefundsFragment.kt$WooRefundsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooRevenueStatsFragment.kt$WooRevenueStatsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooShippingLabelFragment.kt$WooShippingLabelFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooStatsFragment.kt$WooStatsFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooUpdateCouponFragment.kt$WooUpdateCouponFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooUpdateProductFragment.kt$WooUpdateProductFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:WooUpdateVariationFragment.kt$WooUpdateVariationFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>NestedBlockDepth:WooProductsFragment.kt$WooProductsFragment$@Suppress("unused") @Subscribe(threadMode = ThreadMode.MAIN) fun onProductShippingClassesChanged(event: OnProductShippingClassesChanged)</ID>
    <ID>NestedBlockDepth:WooShippingLabelFragment.kt$WooShippingLabelFragment$private fun downloadUrl(url: String): File?</ID>
    <ID>PrintStackTrace:WooShippingLabelFragment.kt$WooShippingLabelFragment$e</ID>
    <ID>PrintStackTrace:WooShippingLabelFragment.kt$WooShippingLabelFragment$ex</ID>
    <ID>SpreadOperator:WooOrdersFragment.kt$WooOrdersFragment$(site, *filter.toTypedArray())</ID>
    <ID>SwallowedException:WooCustomersSearchBuilderFragment.kt$WooCustomersSearchBuilderFragment$e: Exception</ID>
    <ID>SwallowedException:WooShippingLabelFragment.kt$WooShippingLabelFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooCommerceFragment.kt$WooCommerceFragment$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WooCustomersSearchBuilderFragment.kt$WooCustomersSearchBuilderFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooGatewaysFragment.kt$WooGatewaysFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooLeaderboardsFragment.kt$WooLeaderboardsFragment$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WooProductAttributeFragment.kt$WooProductAttributeFragment$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WooRefundsFragment.kt$WooRefundsFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooShippingLabelFragment.kt$WooShippingLabelFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooTaxFragment.kt$WooTaxFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WooUpdateProductFragment.kt$WooUpdateProductFragment$ex: Exception</ID>
    <ID>TopLevelPropertyNaming:JsonObjectExtensionsTests.kt$private const val sampleJson = """ { "string": "Some string", "escaped_string": "\\ \" '", "number": 37, "nullstring": null, "object": { "name": "Object name" } } """</ID>
  </CurrentIssues>
</SmellBaseline>
